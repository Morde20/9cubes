[{"/Users/Morde/Desktop/9cubes/src/index.js":"1","/Users/Morde/Desktop/9cubes/src/components/App.jsx":"2","/Users/Morde/Desktop/9cubes/src/components/Body.jsx":"3"},{"size":157,"mtime":1611908751809,"results":"4","hashOfConfig":"5"},{"size":189,"mtime":1612018766600,"results":"6","hashOfConfig":"5"},{"size":3025,"mtime":1612018335155,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ruayf",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/Morde/Desktop/9cubes/src/index.js",[],["16","17"],"/Users/Morde/Desktop/9cubes/src/components/App.jsx",[],"/Users/Morde/Desktop/9cubes/src/components/Body.jsx",["18","19"],"import React, { useEffect, useState } from \"react\";\n\nconst Body = () => {\n  //state for the time the audio currently is\n  const [currentTime, setCurrentTime] = useState(0);\n  //determine if audio is playing or not\n  const [playerStatus, setPlayerStatus] = useState(false);\n  //create an object with the loops names and audio files\n  const [loops, setLoops] = useState({});\n  //how many cubes are currently \"on\"\n  const [onCount, setOnCount] = useState(0);\n\n  const loopsName = [\n    \"breakBeats\",\n    \"electricGuitar\",\n    \"funkBeats\",\n    \"groove\",\n    \"grooveTanggu\",\n    \"heavyFunk\",\n    \"mazePerc\",\n    \"silentStar\",\n    \"stompySlosh\",\n  ];\n\n  useEffect(() => {\n    const newLoops = {};\n    for (let name of loopsName) {\n      newLoops[name] = {\n        name: name,\n        audio: new Audio(`sounds/${name}.mp3`),\n        on: false,\n      };\n      newLoops[name].audio.setAttribute(\"loop\", \"true\");\n    }\n    setLoops(newLoops);\n  }, []);\n\n  useEffect(() => {\n    for (let name of loopsName) {\n      if (loops[name] && loops[name].on) {\n        if (playerStatus) {\n          loops[name].audio.currentTime = currentTime;\n          loops[name].audio.play();\n        } else {\n          loops[name].audio.pause();\n        }\n      }\n    }\n  }, [playerStatus]);\n\n  const getCurTime = () => {\n    for (let name of loopsName) {\n      if (loops[name].on) return loops[name].audio.currentTime;\n    }\n  };\n\n  const handlePadClick = (name) => {\n    const isOn = loops[name].on;\n    if (isOn) {\n      if (playerStatus) {\n        loops[name].audio.pause();\n        if (onCount === 1) setPlayerStatus(false);\n      }\n      setOnCount(onCount - 1);\n    } else {\n      if (playerStatus) {\n        loops[name].audio.currentTime = getCurTime();\n        loops[name].audio.play();\n      }\n      setOnCount(onCount + 1);\n    }\n    setLoops({ ...loops, [name]: { ...loops[name], on: !isOn } });\n  };\n\n  const handleAudioToggle = (e) => {\n    const clickedBtn = e.target.alt;\n\n    if (clickedBtn === \"playBtn\") {\n      if (playerStatus) return;\n      if (onCount) setPlayerStatus(true);\n    } else {\n      if (!playerStatus) return;\n      setCurrentTime(getCurTime());\n      setPlayerStatus(false);\n    }\n  };\n\n  return (\n    <div>\n      <div className='loopControls'>\n        <img\n          id='playBtn'\n          src='img/play.png'\n          onClick={handleAudioToggle}\n          alt='playBtn'\n        />\n\n        <img\n          id='pauseBtn'\n          src='img/pause.png'\n          onClick={handleAudioToggle}\n          alt='pauseBtn'\n        />\n      </div>\n      <div className='container'>\n        {loopsName.map((name, i) => (\n          <div className={`cube${i}`} key={i}>\n            <p>{name.toLowerCase()}</p>\n            <label className='switch'>\n              <input onClick={() => handlePadClick(name)} type='checkbox' />\n              <span className='slider round'></span>\n            </label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// {loops[name] && loops[name].on ? \"on\" : \"off\"}\n\nexport default Body;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":36,"column":6,"nodeType":"26","endLine":36,"endColumn":8,"suggestions":"27"},{"ruleId":"24","severity":1,"message":"28","line":49,"column":6,"nodeType":"26","endLine":49,"endColumn":20,"suggestions":"29"},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loopsName'. Either include it or remove the dependency array.","ArrayExpression",["32"],"React Hook useEffect has missing dependencies: 'currentTime', 'loops', and 'loopsName'. Either include them or remove the dependency array.",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},{"desc":"36","fix":"37"},"Update the dependencies array to be: [loopsName]",{"range":"38","text":"39"},"Update the dependencies array to be: [currentTime, loops, loopsName, playerStatus]",{"range":"40","text":"41"},[938,940],"[loopsName]",[1243,1257],"[currentTime, loops, loopsName, playerStatus]"]